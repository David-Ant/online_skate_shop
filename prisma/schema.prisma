// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ENUMS

enum Role {
  CUSTOMER
  ADMIN
}

enum ProductType {
  DECK
  WHEEL
}

enum OrderStatus {
  PENDING
  PPROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// MODELS

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    shoppingCart  CartItem[]
    orders        Order[]
    role          Role      @default(CUSTOMER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Stock {
  id           String   @id @default(cuid())
  type         ProductType
  cost         Float
  name         String
  brand        String
  imageUrl     String

  // Nullable fields for specific types of products
  width        Float?   // Deck-specific
  length       Float?   // Deck-specific
  axelDistance Float?   // Deck-specific
  diameter     Int?     // Wheel-specific
  durometer    String?  // Wheel-specific

  customDeckOrders   CustomOrder[] @relation("DeckStock")
  customWheelOrders  CustomOrder[] @relation("WheelsStock")
  cartItems        CartItem[]
}

model CustomOrder {
    id              String   @id @default(cuid())
    deck            Stock       @relation("DeckStock", fields: [deckId], references: [id])
    deckId          String
    wheels          Stock       @relation("WheelsStock", fields: [wheelsId], references: [id])
    wheelsId        String
    cost            Float       // calculated total cost of the custom order
    cartItems  CartItem[] // Reverse relation for CartItem referencing CustomOrder
}

model CartItem {
    id              String   @id @default(cuid())
    user            User        @relation(fields: [userId], references: [id])
    userId          String
    stock           Stock?      @relation(fields: [stockId], references: [id])
    stockId         String?
    customOrder     CustomOrder?@relation(fields: [customOrderId], references: [id])
    customOrderId   String?
    quantity        Int         @default(1)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now()) @updatedAt
}

model Order {
    id           String   @id @default(cuid())
    date         DateTime
    status       String
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
